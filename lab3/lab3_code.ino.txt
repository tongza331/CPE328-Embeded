void commitData(){
  PORTD |= (1 << PORTD4);
  _delay_us(10);
  PORTD &= ~(1 << PORTD4);
  _delay_us(10);
}

void sendLCDCommand(uint8_t command){
  // pull RS low when send command
  PORTD &= ~(1 << PORTD2);
  // send high nibble of the command
  PORTB &= 0xF0; // clear 4 bit half bottom 
  PORTB |= command >> 4; // set 4 bit half top tosend
  commitData();
  
  // send low nibble of the command
  PORTB &= 0xF0;
  PORTB |= (command & 0x0F);
  commitData();
}

void sendLCDData(uint8_t command){
  // push RS high when send Data
  PORTD |= (1 << PORTD2);
  // send high nibble of the command
  PORTB &= 0xF0;
  PORTB |= command >> 4;
  commitData();
  
  // send low nibble of the command
  PORTB &= 0xF0;
  PORTB |= (command & 0x0F);
  commitData();
}

void lcdDisplayString(char* str){
  while (*str != '\0'){
    sendLCDData(*str);
    str++;
  }
}

void initLCD(){
  DDRB |= 0x0F; // set output PB0-PB3
  PORTB &= 0xF0; //clear PB0-PB3 bottom halp bit is zero 
  
  DDRD |= (1 << DDD2) | (1 << DDD4); // set PD2, PD4 is output
  PORTD &= ~(1 << PORTD2) &~(1 << PORTD4); // clear 
  
  // initialize command
  sendLCDCommand(0x33);
  sendLCDCommand(0x32);
  sendLCDCommand(0x28);
  sendLCDCommand(0x0E);
  sendLCDCommand(0x01);
  sendLCDCommand(0x80);
}

void initADC(){
  // Set reference voltage to AVcc
  ADMUX |= (1 << REFS0);
  // Enable ADC with prescalar 128
  ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

void setup()
{
  initLCD();
  initADC();
  lcdDisplayString("62070507208");
}

char buffer[16];

void loop()
{
  // clear display amd move cursor to the beginning of line 1
  sendLCDCommand(0x01);
  sendLCDCommand(0x80);
  
  // start conversation and wait for conversion complete
  ADCSRA |= (1<<ADSC);
  while (ADCSRA&(1<<ADSC));
  
  // adcValue to voltage (mV)
  uint16_t adcValue = ADC;
  // V = 10T + 500: T = (V-500)/10
  uint16_t temp = ((adcValue/1024.0*5000.0)-500.0)/10.0;
  
  itoa(temp, buffer, 10);
  lcdDisplayString("Temp = ");
  lcdDisplayString(buffer);
  _delay_ms(1000);
  
}